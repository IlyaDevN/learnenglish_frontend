name: Deploy Next.js to Pages and Production Server # Новое имя, чтобы отразить обе цели

on:
  push:
    branches:
      - master # Запускается при пуше в ветку 'master'
  workflow_dispatch: # Позволяет запускать вручную из вкладки Actions

# Устанавливаем разрешения для GITHUB_TOKEN для доступа к Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Разрешаем только один одновременный деплой, отменяяqueued runs.
# НЕ отменять in-progress runs для продакшен-деплоя.
concurrency:
  group: "full-deployment" # Изменил имя группы, чтобы охватывать обе задачи
  cancel-in-progress: false

jobs:
  # Job для сборки - общая для обоих типов деплоя
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Рекомендуется использовать актуальную версию Node.js, как на сервере
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages (для GitHub Pages)
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}

      - name: Build Next.js app (для сервера и Pages)
        run: ${{ steps.detect-package-manager.outputs.runner }} next build

      - name: Export static HTML (только для GitHub Pages)
        run: ${{ steps.detect-package-manager.outputs.runner }} next export

      - name: Upload artifact (для GitHub Pages)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Job для деплоя на GitHub Pages
  deploy-gh-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Зависит от успешной сборки
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # НОВАЯ Job для деплоя на ваш Production Server
  deploy-to-server:
    runs-on: ubuntu-latest
    needs: build # Зависит от успешной сборки
    steps:
      - name: Checkout code (для контекста деплоя на сервер)
        uses: actions/checkout@v4

      # Опционально: если у вас есть переменные окружения для продакшена,
      # которые нужны в момент сборки на сервере (если бы она тут не выполнялась).
      # В вашем случае, сборка (npm run build) происходит на сервере,
      # поэтому здесь это не требуется, если env vars уже есть на сервере.
      # - name: Create .env.production file (if needed)
      #   run: |
      #     echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL_PROD }}" > .env.production
      #   env:
      #     NEXT_PUBLIC_BACKEND_URL_PROD: ${{ secrets.NEXT_PUBLIC_BACKEND_URL_PROD }}


      - name: Deploy via SSH to Production Server
        uses: appleboy/ssh-action@master # Используем экшн для выполнения команд по SSH
        with:
          host: ${{ secrets.SSH_HOST }} # IP или домен вашего сервера
          username: ${{ secrets.SSH_USERNAME }} # Ваш логин на сервере (ilya)
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Ваш приватный SSH ключ
          script: |
            # 1. Переходим в директорию продакшен-фронтенда
            cd /var/www/learnenglish_frontend

            # 2. Загружаем последние изменения из ветки master
            git pull origin master

            # 3. Устанавливаем зависимости (если изменились)
            # Это важно, если package.json/package-lock.json изменились
            npm install

            # 4. Создаем продакшен-сборку Next.js
            # Здесь используется Node.js версия и переменные окружения, присутствующие на сервере
            npm run build

            # 5. Перезапускаем systemd сервис Next.js
            sudo systemctl restart nextjs.service